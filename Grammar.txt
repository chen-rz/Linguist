# Copyright © 陈润泽 919103860612
##################################################
# 本文件为语法规则产生式，适用于LR(1)语法分析，请使用上下文无关文法（2型文法）产生式
# 注释行以 # 开头，仅支持整行注释
# 非终结符请以 <  > 修饰，终结符请以 ( ) 修饰，否则可能导致难以预料的错误
# 产生式箭头表示为 ==>
# 产生式右部支持以 $ 分隔多个选项
# 空产生式（ε）和句子括号（#）以空字符串表示，请不要输入任何字符
# 空格、空行会被忽略
# 文法开始符号必须命名为 <START>，拓广文法的开始符号必须命名为 <START'>
# 文法的首条产生式必须为 <START'> ==> () <START> ()
##################################################

# 第143页：
#<START'> ==> () <START> ()
#<START> ==> (a)<A>(d) $ (b)<A>(c) $ (a)(e)(c) $ (b)(e)(d)
#<A> ==> (e)

# 第147页：
#<START'> ==> () <START> ()
#<START> ==> <B> <B>
#<B> ==> (a) <B> $ (b)

# 著名的期末复习题
#<START'> ==> () <START> ()
#<START> ==> <A>
#<A> ==> <A> <B> $ ()
#<B> ==> (a) <B> $ (b)

##################################################

# 不检测换行，也不采用GO语言式自动添加行末分号的编译过程，因此需要行末分号，分析时将其转换为句子括号以起分隔作用
# 开始
<START'> ==> () <START> ()
# 包声明、语句、函数定义
<START> ==> <START><Package> $ <START><Statement> $ <START><Function>
<START> ==> ()


# 通用非终结符
# 语句结束符
<EOS> ==> (DEL_SEMICOLON)

# 变量类型
<Var_Type> ==> (KWD_AUTO) $ (KWD_DOUBLE) $ (KWD_BOOL) $ (KWD_INT)
<Var_Type> ==> (KWD_LONG) $ (KWD_FLOAT) $ (KWD_STRING)

# 运算符
# + - * / = ==
<Operator> ==> (OPR_PLUS) $ (OPR_MINUS) $ (OPR_MUL) $ (OPR_DIV) $ (OPR_ASSIGN) $ (OPR_EQUAL)
# >= <= > <
<Operator> ==> (OPR_GET) $ (OPR_LET) $ (OPR_GT) $ (OPR_LT)
# % || && !
<Operator> ==> (OPR_MOD) $ (OPR_LOGI_OR) $ (OPR_LOGI_AND) $ (OPR_NOT)
# += -= *= /=
<Operator> ==> (OPR_SELF_PLUS) $ (OPR_SELF_MINUS) $ (OPR_SELF_MUL) $ (OPR_SELF_DIV)
# ~ ^ & |
<Operator> ==> (OPR_INVERSE) $ (OPR_XOR) $ (OPR_ARITH_AND) $ (OPR_ARITH_OR)
# << >>
<Operator> ==> (OPR_DBL_LT) $ (OPR_DBL_GT)

# 常量
<Constant> ==> (CON_DECIMAL) $ (CON_HEX) $ (CON_FLOAT) $ (CON_SCIENTIFIC) $ (CON_EXPRESSION)
<Constant> ==> (CON_COMPLEX) $ (CON_STRING) $ (KWD_FALSE) $ (KWD_TRUE)


# 包声明
# import x
<Package> ==> (KWD_IMPORT)(TOK_IDENTIFIER)<P_1>
# .x
<P_1> ==> (DEL_PERIOD)(TOK_IDENTIFIER)<P_1> $ <P_2>
# as x;
<P_2> ==> (KWD_AS)(TOK_IDENTIFIER)<EOS> $ <EOS>
# from x
<Package> ==> (KWD_FROM)(TOK_IDENTIFIER)<P_3>
# .x
<P_3> ==> (DEL_PERIOD)(TOK_IDENTIFIER)<P_3>
# import *; / import x;
<P_3> ==> (KWD_IMPORT)(OPR_MUL)<EOS> $ (KWD_IMPORT)(TOK_IDENTIFIER)<EOS>


# 语句
# 表达式、返回语句、声明语句、if语句、while语句、for语句
<Statement> ==> <S_Expression> $ <S_Return> $ <S_Define> $ <S_If> $ <S_While> $ <S_For>
# 语句块
<Statement> ==> (DEL_L_BRACE)<Statement>(DEL_R_BRACE)

# 表达式，不支持括号
<S_Expression> ==> (TOK_IDENTIFIER)<S_Exp_1> $ <Constant><S_Exp_1>
<S_Exp_1> ==> <Operator>(TOK_IDENTIFIER)<S_Exp_1> $ <Operator><Constant><S_Exp_1> $ <EOS>

# 返回语句
<S_Return> ==> (KWD_RETURN)<EOS> $ (KWD_RETURN)(TOK_IDENTIFIER)<EOS> $ (KWD_RETURN)<S_Expression><EOS>

# 声明语句
<S_Define> ==> (KWD_STATIC)<S_D_1> $ (KWD_CONST)<S_D_1> $ <S_D_1>
<S_Define> ==> (KWD_STATIC)(KWD_CONST)<S_D_1> $ (KWD_CONST)(KWD_STATIC)<S_D_1>
<S_D_1> ==> <Var_Type>(TOK_IDENTIFIER)(OPR_ASSIGN)<S_Expression>

# if语句
<S_If> ==> (KWD_IF)(DEL_L_PARENTHESIS)<S_Expression>(DEL_R_PARENTHESIS)<Statement>

# while语句
<S_While> ==> (KWD_WHILE)(DEL_L_PARENTHESIS)<S_Expression>(DEL_R_PARENTHESIS)<Statement>

# for语句
<S_For> ==> (KWD_FOR)(DEL_L_PARENTHESIS)<Statement><Expression><Expression>(DEL_R_PARENTHESIS)<Statement>


# 函数定义
<Function> ==> (KWD_DEF)(TOK_IDENTIFIER)(DEL_L_PARENTHESIS)<F_P>
# 参数表
<F_P> ==> (TOK_IDENTIFIER)(DEL_COLON)<Var_Type><F_P_1> $ <F_P_E>
<F_P_1> ==> (DEL_COMMA)(TOK_IDENTIFIER)(DEL_COLON)<Var_Type><F_P_1> $ <F_P_E>
<F_P_E> ==> (DEL_R_PARENTHESIS)(DEL_L_BRACE)<F_B>
# 函数体
<F_B> ==> <Statement><F_B> $ (DEL_R_BRACE)
